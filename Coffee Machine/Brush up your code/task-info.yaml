type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachineParams.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public
    class CoffeeMachineParams {
        static int water = 400;
        static int milk = 540;
        static int beans = 120;
        static int disposableCups = 9;
        static int money = 550;

        void take() {
            System.out.println("I gave you $" + money);
            money = 0;
            System.out.println();
        }

        void printCoffeeMachineState() {
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(water + " ml of water");
            System.out.println(milk + " ml of milk");
            System.out.println(beans + " g of coffee beans");
            System.out.println(disposableCups + " disposable cups");
            System.out.println("$" + money + " of money");
            System.out.println();
        }

         void fill() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many ml of water you want to add:");
            water += scanner.nextInt();
            System.out.println("Write how many ml of milk you want to add: ");
            milk += scanner.nextInt();
            System.out.println("Write how many grams of coffee beans you want to add: ");
            beans += scanner.nextInt();
            System.out.println("Write how many disposable cups of coffee you want to add: ");
            disposableCups += scanner.nextInt();
            System.out.println();
        }

        void buy() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                choice = 0;
            }
            switch (choice) {
                case 1: if (enoughIngredients(250, 0, 16, 1)) {
                        makeCoffee(250, 0, 16, 4);
                        }
                        break;
                case 2: if (enoughIngredients(350, 75, 20, 1)) {
                        makeCoffee(350, 75, 20, 7);
                        }
                        break;
                case 3: if (enoughIngredients(200, 100, 12, 1)) {
                        makeCoffee(200, 100, 12, 6);
                        }
                        break;
                default: return;
            }
        }

        boolean enoughIngredients(int water, int milk, int beans, int cups) {
            if (water > CoffeeMachineParams.water) {
                System.out.println("Sorry, not enough water!");
                return false;
            } else if (milk > CoffeeMachineParams.milk) {
                System.out.println("Sorry, not enough milk!");
                return false;
            } else if (beans > CoffeeMachineParams.beans) {
                System.out.println("Sorry, not enough beans!");
                return false;
            } else if (cups > CoffeeMachineParams.disposableCups) {
                System.out.println("Sorry, not enough disposable cups!");
                return false;
            }
            return true;
        }

        public void makeCoffee(int water, int milk, int beans, int price) {
                System.out.println("I have enough resources, making you a coffee!");
                this.water -= water;
                this.milk -= milk;
                this.beans -= beans;
                this.money += price;
                this.disposableCups--;
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachineLogic.java
  visible: true
  text: |
    package machine;

    import java.util.Hashtable;

    public
    class CoffeeMachineLogic {
        static final int WATER_PER_PORTION = 200;
        static final int MILK_PER_PORTION = 50;
        static final int COFFEE_BEANS_PER_PORTION = 15;

        public static void calculateIngredients(int cups) {
            System.out.println("For " + cups + " cups of coffee you will need:");
            System.out.println(WATER_PER_PORTION * cups + " ml of water");
            System.out.println(MILK_PER_PORTION * cups + " ml of milk");
            System.out.println(COFFEE_BEANS_PER_PORTION * cups + " g of coffee beans");
        }

        public static int calculateAmountOfCups(Hashtable<String, Integer> coffeeMachineParams) {
            int water = coffeeMachineParams.get("water") / WATER_PER_PORTION;
            int milk = coffeeMachineParams.get("milk") / MILK_PER_PORTION;
            int beans = coffeeMachineParams.get("beans") / COFFEE_BEANS_PER_PORTION;

            return Math.min(water, Math.min(milk, beans));
        }
    }
  learner_created: true
- name: src/machine/MainUI.java
  visible: true
  text: |
    package machine;

    import java.util.*;

    public class MainUI {
        int getAmountOfCoffee() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Write how many cups of coffee you will need:");
            return scanner.nextInt();
        }

        Hashtable<String, Integer> getIngredientLevel() {
            Scanner scanner = new Scanner(System.in);
            Hashtable<String, Integer> ingredientLevel = new Hashtable<String, Integer>();

            System.out.println("Write how many ml of water the coffee machine has:");
            ingredientLevel.put("water", scanner.nextInt());
            System.out.println("Write how many ml of milk the coffee machine has:");
            ingredientLevel.put("milk", scanner.nextInt());
            System.out.println("Write how many grams of coffee beans the coffee machine has:");
            ingredientLevel.put("beans", scanner.nextInt());
            return  ingredientLevel;
        }

        void printResult(int cups, int portionsInMachine) {
            if (portionsInMachine > cups) {
                System.out.println("Yes, I can make that amount of coffee (and even " + pluralizeResult("cup", (portionsInMachine - cups)) + " more than that)");
            } else if (portionsInMachine == cups) {
                System.out.println("Yes, I can make that amount of coffee");
            } else if (portionsInMachine == 0) {
                System.out.println("No, I can make only 0 cups of coffee");
            } else {
                System.out.println("No, I can make only " + pluralizeResult("cup", portionsInMachine) + " of coffee");
            }
        }

        public static String pluralizeResult(String word, int quantity) {
            StringBuilder sb = new StringBuilder();
            sb.append(quantity).append(" ").append(word);
            if (quantity > 1) {
                sb.append("s");
            }
            return String.valueOf(sb);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 01 May 2021 11:46:34 UTC
record: -1
